# NotiAnalyst AI üì¢: Analizador Inteligente de Noticias

NotiAnalyst AI es una aplicaci√≥n Python que utiliza Inteligencia Artificial para obtener, analizar, filtrar y presentar noticias. Realiza an√°lisis de sentimiento, detecci√≥n de noticias falsas, clasificaci√≥n tem√°tica, an√°lisis emocional y resumen de texto para ofrecer una perspectiva m√°s profunda sobre la informaci√≥n.

## ‚ú® Caracter√≠sticas

* **Recopilaci√≥n de Noticias**: Obtiene las √∫ltimas noticias en espa√±ol utilizando la API de GNews.
* **An√°lisis Multifac√©tico con IA**:
    * **Sentimiento**: Clasifica las noticias de 1 a 5 estrellas (modelo multiling√ºe).
    * **Detecci√≥n de Fake News**: Identifica si una noticia es probablemente real o falsa.
    * **Clasificaci√≥n Tem√°tica**: Determina el tema principal de la noticia (ej. deportes, tecnolog√≠a) usando zero-shot classification.
    * **An√°lisis Emocional**: Detecta la emoci√≥n predominante en el texto (ej. alegr√≠a, enojo).
    * **Resumen Autom√°tico**: Genera un resumen conciso de cada noticia.
* **Categorizaci√≥n Personalizada**: Clasifica las noticias en categor√≠as como "Buena/Objetiva", "Subjetiva pero verdadera", "Dudosa/Falsa".
* **Extracci√≥n de Noticias Objetivas**: Filtra y presenta un conjunto de noticias consideradas altamente objetivas seg√∫n criterios estrictos.
* **Interfaz Web Interactiva**: Muestra las noticias analizadas en una aplicaci√≥n web f√°cil de usar construida con Streamlit, con im√°genes, res√∫menes y todos los insights de la IA.

## üìÇ Estructura del Proyecto

```
.
‚îú‚îÄ‚îÄ main.py                 # Script para obtener noticias de GNews API y guardarlas en noticias.json
‚îú‚îÄ‚îÄ analizar_filtrar.py     # Script principal para analizar noticias con IA y generar noticias_filtradas.json y noticias_objetivas.json
‚îú‚îÄ‚îÄ app_web.py              # Aplicaci√≥n web Streamlit para visualizar las noticias analizadas
‚îú‚îÄ‚îÄ noticias.json           # (Generado) Noticias crudas obtenidas de GNews
‚îú‚îÄ‚îÄ noticias_filtradas.json # (Generado) Noticias analizadas y categorizadas para la web
‚îú‚îÄ‚îÄ noticias_objetivas.json # (Generado) Subconjunto de noticias altamente objetivas
‚îú‚îÄ‚îÄ .env                    # (Necesitas crearlo) Para guardar tu API Key de GNews
‚îú‚îÄ‚îÄ requirements.txt        # Dependencias de Python
‚îî‚îÄ‚îÄ README.md               # Este archivo
```
*(Opcional: `analizador_objetividad.py` - Script experimental para un an√°lisis de objetividad alternativo, no integrado en el flujo principal de la app web.)*

## ‚öôÔ∏è Requisitos Previos

* Python 3.8+
* pip (gestor de paquetes de Python)
* Una cuenta de Hugging Face (y haber iniciado sesi√≥n con `huggingface-cli login` si usas modelos que lo requieran, aunque los modelos actuales son p√∫blicos).
* Una API Key de [GNews.io](https://gnews.io/)

## üöÄ Instalaci√≥n

1.  **Clona el repositorio (si est√° en uno) o descarga los archivos.**
    ```bash
    # Ejemplo si estuviera en Git
    # git clone [https://tu-repositorio-url.git](https://tu-repositorio-url.git)
    # cd tu-proyecto
    ```

2.  **Crea y activa un entorno virtual (recomendado):**
    ```bash
    python -m venv venv
    # En Windows
    venv\Scripts\activate
    # En macOS/Linux
    source venv/bin/activate
    ```

3.  **Instala las dependencias:**
    ```bash
    pip install -r requirements.txt
    ```
    *Nota sobre PyTorch (`torch`)*: Si tienes problemas con la instalaci√≥n de `torch` o quieres usar una versi√≥n espec√≠fica para GPU, visita la [p√°gina oficial de PyTorch](https://pytorch.org/get-started/locally/) para obtener el comando de instalaci√≥n adecuado para tu sistema y configuraci√≥n de CUDA.

4.  **Configura tu API Key de GNews:**
    * Crea un archivo llamado `.env` en la ra√≠z del proyecto.
    * A√±ade tu API Key de GNews al archivo `.env` de la siguiente manera:
        ```
        GNEWS_API_KEY=TU_API_KEY_AQUI
        ```

5.  **(Opcional) Login en Hugging Face CLI:**
    Si vas a usar modelos privados o algunos que requieran autenticaci√≥n (los actuales no deber√≠an, pero es buena pr√°ctica si expandes):
    ```bash
    huggingface-cli login
    ```
    Esto guardar√° tu token de Hugging Face localmente.

## ‚ñ∂Ô∏è Uso

El proceso se divide en tres pasos principales:

1.  **Obtener Noticias Crudas:**
    Ejecuta `main.py` para descargar las √∫ltimas noticias de GNews. Esto crear√° o actualizar√° el archivo `noticias.json`.
    ```bash
    python main.py
    ```
    Puedes cambiar el n√∫mero de noticias a descargar editando el par√°metro `max` en `main.py`.

2.  **Analizar y Filtrar Noticias con IA:**
    Ejecuta `analizar_filtrar.py` para procesar las noticias de `noticias.json`. Este script aplicar√° todos los modelos de IA y generar√°:
    * `noticias_filtradas.json`: Contiene las noticias analizadas y organizadas en secciones como "destacadas", "mejores", "peores".
    * `noticias_objetivas.json`: Contiene un subconjunto de noticias consideradas altamente objetivas.
    ```bash
    python analizar_filtrar.py
    ```
    Este proceso puede tardar un poco dependiendo del n√∫mero de noticias y la potencia de tu CPU/GPU.

3.  **Visualizar en la Aplicaci√≥n Web:**
    Lanza la aplicaci√≥n Streamlit para ver e interactuar con las noticias analizadas.
    ```bash
    streamlit run app_web.py
    ```
    Abre tu navegador web y ve a la direcci√≥n URL local que te indica Streamlit (usualmente `http://localhost:8501`).

Para mantener la aplicaci√≥n actualizada, deber√°s ejecutar los pasos 1 y 2 peri√≥dicamente.

## üîß Soluci√≥n de Posibles Errores

* **`GNEWS_API_KEY` no encontrada / Error de API**:
    * Aseg√∫rate de que el archivo `.env` existe en la ra√≠z del proyecto y contiene `GNEWS_API_KEY=TU_API_KEY_REAL`.
    * Verifica que tu API Key de GNews sea v√°lida y no haya excedido la cuota.
* **Errores al descargar modelos de Hugging Face**:
    * Comprueba tu conexi√≥n a internet.
    * Aseg√∫rate de tener suficiente espacio en disco (los modelos pueden ser grandes).
    * Algunos modelos pueden ser eliminados o movidos; verifica el nombre del modelo en [Hugging Face Model Hub](https://huggingface.co/models).
* **Problemas de dependencias (`ModuleNotFoundError`)**:
    * Aseg√∫rate de haber activado tu entorno virtual.
    * Ejecuta `pip install -r requirements.txt` nuevamente.
* **Rendimiento Lento del An√°lisis**:
    * El an√°lisis de IA, especialmente con m√∫ltiples modelos, puede ser intensivo.
    * Si tienes una GPU compatible con CUDA y PyTorch configurado para GPU (cambiando `device = 0` en `analizar_filtrar.py`), el proceso ser√° m√°s r√°pido.
    * Reduce el n√∫mero de noticias a analizar si es necesario para pruebas.
* **Modelo Emocional en Espa√±ol**:
    * El modelo `j-hartmann/emotion-english-distilroberta-base` est√° entrenado en ingl√©s. Para noticias en espa√±ol, su precisi√≥n puede variar. Considera buscar modelos de an√°lisis de emociones multiling√ºes o espec√≠ficos para espa√±ol en Hugging Face si los resultados no son satisfactorios.
* **Resultados de "Tema Principal" no satisfactorios**:
    * El an√°lisis tem√°tico zero-shot depende de la calidad del texto y de la lista de `posibles_categorias` definida en `analizar_filtrar.py`. Puedes ajustar estas categor√≠as.
    * La interfaz web ahora muestra el tema solo si la confianza es superior a un umbral (30% por defecto en `app_web.py`, puedes ajustarlo).

## Ìì® Contribuciones

¬°Las contribuciones son bienvenidas! Si tienes ideas para mejorar el proyecto, por favor abre un issue o un pull request (si estuviera en un repositorio p√∫blico).